{"version":3,"file":"static/js/500.93eb77c5.chunk.js","mappings":"iPAEaA,EAAgBC,EAAAA,GAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qJAW9BC,EAAcH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wLAa1BG,EAAYL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4S,8ICVtC,EAbkB,SAAHK,GAA0B,IAApBC,EAAYD,EAAZC,aACnB,OACEC,EAAAA,EAAAA,KAACV,EAAAA,GAAa,CAAAW,UACZD,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMC,SAAUJ,EAAaE,SAAA,EAC3BD,EAAAA,EAAAA,KAACN,EAAAA,GAAW,CAACU,KAAK,OAAOC,KAAK,SAASC,YAAY,YACnDN,EAAAA,EAAAA,KAACJ,EAAAA,EAAS,CAACQ,KAAK,SAAQH,SAAC,iBAKnC,E,wBCkCA,EAzCe,WACb,IAAAM,GAAqBC,EAAAA,EAAAA,UAAS,IAArBC,GAAwBC,EAAAA,EAAAA,GAAAH,EAAA,GAAhB,GACjBI,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAH,EAAAA,EAAAA,GAAAC,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA4CR,EAAAA,EAAAA,UAAS,IAAGS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAAjDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAClCG,EAAYN,EAAaO,IAAI,cAAgB,GAuBnD,OAdAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAUG,OAAQ,CACpB,IAAMC,EAAiB,eAAA1B,GAAA2B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEIC,EAAAA,EAAAA,GAAY,gBAAiBb,GAAW,KAAD,EAAAQ,EAAAE,EAAAI,KAAzDL,EAAOD,EAAPC,QACRV,EAAkBU,GAASC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE3BM,QAAQC,IAAIP,EAAAK,GAAMG,SAAS,yBAAAR,EAAAS,OAAA,GAAAZ,EAAA,kBAE9B,kBAPsB,OAAA7B,EAAA0C,MAAA,KAAAC,UAAA,KAQvBjB,GACF,CACF,GAAG,CAACJ,KAGFlB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,KACP1C,EAAAA,EAAAA,KAAC2C,EAAS,CAAC5C,aAxBM,SAAA6C,GACnBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,OAAOC,MACnCxC,EAASqC,GACT/B,EAAgB+B,EAAa,CAAE1B,UAAW0B,GAAe,CAAC,EAC5D,IAoBK5B,EAAegC,OAAS,IACvBlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACTC,MAAK,sBAAAC,OAAwBjC,EAAS,KACtCkC,OAAQpC,MAKlB,C","sources":["components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledWrapper = styled.section`\n  margin-top: 15px;\n\n  form {\n    display: flex;\n    justify-content: center;\n    align-items: baseline;\n    column-gap: 10px;\n  }\n`;\n\nexport const StyledInput = styled.input`\n  width: 230px;\n  height: 24px;\n  padding: 4px;\n  border: 2px solid lightgray;\n  outline: none;\n\n  &:focus {\n    border: 2px solid red;\n    border-radius: 5px;\n  }\n`;\n\nexport const StyledBtn = styled.button`\n  cursor: pointer;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n  min-width: 80px;\n  min-height: 32px;\n\n  color: red;\n  background-color: white;\n  font-weight: 600;\n  box-shadow: 2px 2px 4px 1px lightgray;\n  transition: all 300ms;\n\n  &:hover {\n    scale: 1.03;\n  }\n`;\n","import React from 'react';\nimport { StyledWrapper, StyledInput, StyledBtn } from './SearchBar.styled';\n\nconst SearchBar = ({ handleSubmit }) => {\n  return (\n    <StyledWrapper>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <StyledInput type=\"text\" name=\"search\" placeholder=\"Batman\" />\n          <StyledBtn type=\"submit\">Search</StyledBtn>\n        </form>\n      </div>\n    </StyledWrapper>\n  );\n};\n\nexport default SearchBar;\n","import Header from 'components/Header/Header';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovies } from 'services/movies.api';\n\nconst Movies = () => {\n  const [, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const queryWord = searchParams.get('queryWord') || '';\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const queryParam = e.target.search.value;\n    setQuery(queryParam);\n    setSearchParams(queryParam ? { queryWord: queryParam } : {});\n  };\n\n  useEffect(() => {\n    if (queryWord.trim()) {\n      const fetchSerchedMovie = async () => {\n        try {\n          const { results } = await fetchMovies('/search/movie', queryWord);\n          setSearchedMovies(results);\n        } catch (error) {\n          console.log(error.message);\n        }\n      };\n      fetchSerchedMovie();\n    }\n  }, [queryWord]);\n\n  return (\n    <div>\n      <Header />\n      <SearchBar handleSubmit={handleSubmit} />\n      {searchedMovies.length > 0 && (\n        <MoviesList\n          title={`Movies with title \"${queryWord}\"`}\n          movies={searchedMovies}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["StyledWrapper","styled","_templateObject","_taggedTemplateLiteral","StyledInput","_templateObject2","StyledBtn","_templateObject3","_ref","handleSubmit","_jsx","children","_jsxs","onSubmit","type","name","placeholder","_useState","useState","setQuery","_slicedToArray","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","searchedMovies","setSearchedMovies","queryWord","get","useEffect","trim","fetchSerchedMovie","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchMovies","results","_context","prev","next","fetchMovies","sent","t0","console","log","message","stop","apply","arguments","Header","SearchBar","e","preventDefault","queryParam","target","search","value","length","MoviesList","title","concat","movies"],"sourceRoot":""}